"""Added predefined response templates

Revision ID: f36705415cd9
Revises: 3e84bb67bced
Create Date: 2025-04-14 15:44:36.881283

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic.context import get_context

from core.utils import current_utc_time

# revision identifiers, used by Alembic.
revision: str = 'f36705415cd9'
down_revision: Union[str, None] = '3e84bb67bced'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('predefined_response_template',
    sa.Column('response', sa.String(length=4000), nullable=False),
    sa.Column('description', sa.String(length=4000), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('create_time', sa.DateTime(), nullable=False),
    sa.Column('update_time', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_predefined_response_template_create_time'), 'predefined_response_template', ['create_time'], unique=False)
    op.create_index(op.f('ix_predefined_response_template_id'), 'predefined_response_template', ['id'], unique=False)
    op.create_index(op.f('ix_predefined_response_template_update_time'), 'predefined_response_template', ['update_time'], unique=False)

    # Add predefined response templates through insert statement
    connection = op.get_bind()
    connection.execute(
        sa.text("""
                INSERT INTO predefined_response_template (response, description, status, create_time, update_time)
                VALUES 
                    ('I couldn''t respond to that input. Please try rephrasing or let me know how I can assist you differently.',
                     'Standard response for unclear or ambiguous input', 1, :now, :now),
                    ('I''m unable to share that message due to privacy settings. Let me know if I can help with anything else.',
                     'Response for privacy-related content restrictions', 1, :now, :now),
                    ('This topic isn''t relevant to our discussion. Please ask something else I can help with.',
                     'Response for off-topic or irrelevant queries', 1, :now, :now),
                    ('I''m unable to respond to that request due to content guidelines. Let me know if there''s anything else I can assist you with.',
                     'Response for content that violates guidelines', 1, :now, :now)
            """),
        {"now": current_utc_time()}
    )
    # ### end Alembic commands ###

    # Create a view that combines response_template and predefined_response_template
    # Detect dialect: 'sqlite', 'mysql', etc.
    dialect_name = get_context().dialect.name

    if dialect_name == 'sqlite':
        concat_custom = "'custom_' || rt.id"
        concat_predef = "'predef_' || prt.id"
    else:
        # For other dialects MySQL, MariaDB, PostgreSQL, use CONCAT function
        concat_custom = "CONCAT('custom_', rt.id)"
        concat_predef = "CONCAT('predef_', prt.id)"

    connection.execute(
        sa.text(f"""
            CREATE VIEW response_template_view AS
                SELECT 
                    {concat_custom} AS synthetic_id,
                    rt.id,
                    rt.response,
                    rt.description,
                    rt.status,
                    rt.create_time,
                    rt.update_time,
                    rt.tenant_id,
                    'CUSTOM' as type
                FROM response_template rt
            UNION ALL
                SELECT 
                    {concat_predef} AS synthetic_id,
                    prt.id,
                    prt.response,
                    prt.description,
                    prt.status,
                    prt.create_time,
                    prt.update_time,
                    tenant_ids.tenant_id,
                    'PREDEFINED' as type
                FROM predefined_response_template prt
                CROSS JOIN (
                    SELECT DISTINCT tenant_id FROM response_template
                ) tenant_ids;
        """)
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_predefined_response_template_update_time'), table_name='predefined_response_template')
    op.drop_index(op.f('ix_predefined_response_template_id'), table_name='predefined_response_template')
    op.drop_index(op.f('ix_predefined_response_template_create_time'), table_name='predefined_response_template')
    op.drop_table('predefined_response_template')
    # Drop the view
    connection = op.get_bind()
    connection.execute(sa.text("DROP VIEW IF EXISTS response_template_view"))
    # ### end Alembic commands ###
